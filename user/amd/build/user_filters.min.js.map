{"version":3,"sources":["../src/user_filters.js"],"names":["init","uniqid","setDropdownValue","e","preventDefault","dropdown","target","dropdownType","parentNode","querySelector","id","document","getElementById","innerText","value","getAttribute","hasAttribute","optionsid","classList","add","remove","setOptionValue","valueTag","createElement","crossicon","setAttribute","appendChild","toggleFilterDropdown","dropdownList","addEventListener","querySelectorAll","forEach","filterdiv"],"mappings":"4IAwBoB,QAAPA,CAAAA,IAAO,CAACC,CAAD,CAAY,IAUtBC,CAAAA,CAAgB,CAAG,SAAAC,CAAC,CAAI,CAC1BA,CAAC,CAACC,cAAF,GAD0B,GAGpBC,CAAAA,CAAQ,CAAGF,CAAC,CAACG,MAHO,CAIpBC,CAAY,CAAGF,CAAQ,CAACG,UAAT,CAAoBA,UAApB,CAA+BC,aAA/B,CAA6C,QAA7C,EAAuDC,EAJlD,CAO1BC,QAAQ,CAACC,cAAT,CAAwBL,CAAxB,EAAsCM,SAAtC,CAAkDR,CAAQ,CAACQ,SAA3D,CACAF,QAAQ,CAACC,cAAT,WAA2BL,CAA3B,eAAoDO,KAApD,CAA4DT,CAAQ,CAACU,YAAT,CAAsB,YAAtB,CAA5D,CAGA,GAAIV,CAAQ,CAACW,YAAT,CAAsB,wBAAtB,CAAJ,CAAqD,CACjD,GAAMC,CAAAA,CAAS,CAAGZ,CAAQ,CAACU,YAAT,CAAsB,wBAAtB,CAAlB,CAEAJ,QAAQ,CAACC,cAAT,CAAwBK,CAAxB,EAAmCC,SAAnC,CAA6CC,GAA7C,CAAiD,gBAAjD,EACAR,QAAQ,CAACC,cAAT,CAAwBK,CAAxB,EAAmCC,SAAnC,CAA6CE,MAA7C,CAAoD,QAApD,CACH,CAEJ,CA5B2B,CA8BtBC,CAAc,CAAG,SAAAlB,CAAC,CAAI,IAClBW,CAAAA,CAAK,CAAGX,CAAC,CAACG,MAAF,CAASS,YAAT,CAAsB,YAAtB,CADU,CAEpBO,CAAQ,CAAGX,QAAQ,CAACY,aAAT,CAAuB,MAAvB,CAFS,CAGpBC,CAAS,CAAGb,QAAQ,CAACY,aAAT,CAAuB,GAAvB,CAHQ,CAOxBD,CAAQ,CAACG,YAAT,CAAsB,YAAtB,CAAoCX,CAApC,EACAQ,CAAQ,CAACJ,SAAT,CAAmBC,GAAnB,CAAuB,gBAAvB,CAAyC,SAAzC,CAAoD,YAApD,CAAkE,SAAlE,CAA6E,kBAA7E,CAAiG,MAAjG,EACAG,CAAQ,CAACT,SAAT,CAAqBV,CAAC,CAACG,MAAF,CAASO,SAA9B,CACAW,CAAS,CAACN,SAAV,CAAoBC,GAApB,CAAwB,MAAxB,CAAgC,IAAhC,CAAsC,UAAtC,CAAkD,MAAlD,CAA0D,MAA1D,EACAG,CAAQ,CAACI,WAAT,CAAqBF,CAArB,EACAb,QAAQ,CAACC,cAAT,WAA2BX,CAA3B,yBAAwDyB,WAAxD,CAAoEJ,CAApE,CACH,CA3C2B,CA6CtBK,CAAoB,CAAG,SAAAxB,CAAC,CAAI,CAC9B,GAAMyB,CAAAA,CAAY,CAAGzB,CAAC,CAACG,MAAF,CAASE,UAAT,CAAoBC,aAApB,CAAkC,IAAlC,CAArB,CAMAmB,CAAY,CAACC,gBAAb,CAA8B,OAA9B,CAAuCR,CAAvC,EAEAO,CAAY,CAACV,SAAb,CAAuBE,MAAvB,CAA8B,QAA9B,CACH,CAvD2B,CA0D5BT,QAAQ,CAACmB,gBAAT,CAA0B,mCAA1B,EAA+DC,OAA/D,CAAuE,SAAC1B,CAAD,CAAc,CACjFA,CAAQ,CAACwB,gBAAT,CAA0B,OAA1B,CAAmC3B,CAAnC,CACH,CAFD,EAKA,GAAM8B,CAAAA,CAAS,CAAGrB,QAAQ,CAACC,cAAT,WAA2BX,CAA3B,oBAAlB,CAEA+B,CAAS,CAACvB,aAAV,CAAwB,sBAAxB,EAA8CoB,gBAA9C,CAA+D,OAA/D,CAAwEF,CAAxE,EACAK,CAAS,CAACvB,aAAV,CAAwB,MAAxB,EAAgCoB,gBAAhC,CAAiD,OAAjD,CAA0DF,CAA1D,CAEH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module responsible for handling forum summary report filters.\n *\n * @module     core_user/user_filter\n * @package    core_user\n * @copyright  2020 Michael Hawkins <michaelh@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport const init = (uniqid) => {\n\n//TODO: Most of this is probably generic enough that it can be initialised in the outer filter,\n//          rather than once per filter (so uniqid wouldnt be passed in).\n//TODO: Need to remember that additional ones will be added dynamically, and will need the\n//       same handlers applied to them, so it should support that.\n//TODO: Any of the type in search stuff / handling of the selection probably need to be\n//      imported from a new file (or at least set as a separate const).\n\n    // Handler for setting values for single dropdowns.\n    const setDropdownValue = e => {\n        e.preventDefault();\n\n        const dropdown = e.target;\n        const dropdownType = dropdown.parentNode.parentNode.querySelector('button').id;\n\n        // Display the selection and set the hidden value.\n        document.getElementById(dropdownType).innerText = dropdown.innerText;\n        document.getElementById(`${dropdownType}-selected`).value = dropdown.getAttribute('data-value');\n\n        // Filter type dropdowns need to display the filter options.\n        if (dropdown.hasAttribute(\"data-filter-options-id\")) {\n            const optionsid = dropdown.getAttribute(\"data-filter-options-id\");\n\n            document.getElementById(optionsid).classList.add('d-inline-block');\n            document.getElementById(optionsid).classList.remove('hidden');\n        }\n\n    };\n\n    const setOptionValue = e => {\n        const value = e.target.getAttribute('data-value');\n        let valueTag = document.createElement('span');\n        let crossicon = document.createElement('i');\n        //TODO: Figure out if we need to store the values somewhere hidden as well, for easy sending in the web service\n\n        // Set up and display new tag for chosen value.\n        valueTag.setAttribute('data-value', value);\n        valueTag.classList.add('d-inline-block', 'bg-dark', 'text-white', 'rounded', 'font-weight-bold', 'px-1');\n        valueTag.innerText = e.target.innerText;\n        crossicon.classList.add('icon', 'fa', 'fa-times', 'pl-2', 'mr-0');\n        valueTag.appendChild(crossicon);\n        document.getElementById(`${uniqid}-filter-options-set`).appendChild(valueTag);\n    };\n\n    const toggleFilterDropdown = e => {\n        const dropdownList = e.target.parentNode.querySelector('ul');\n\n        //TODO: This is the start of selecting the filter type, where it shows a dropdown when selected,\n                //there's also the case of the value being selected on the next dropdown, which adds the\n                //little removable tag bits. Need to see if they can be differentiated (maybe a data- tag) that\n            //allows generic code here to set one of two different event listeners, depending which type it is.\n        dropdownList.addEventListener('click', setOptionValue);\n\n        dropdownList.classList.remove('hidden');\n    };\n\n    // Set listener on each filter dropdown menu.\n    document.querySelectorAll('.dropdown-menu.user-filter-select').forEach((dropdown) => {\n        dropdown.addEventListener('click', setDropdownValue);\n    });\n\n    // Add listeners for 'type or select' filter options type.\n    const filterdiv = document.getElementById(`${uniqid}-filter-options`);\n\n    filterdiv.querySelector('input[type=\"text\"]').addEventListener('focus', toggleFilterDropdown);\n    filterdiv.querySelector('span').addEventListener('click', toggleFilterDropdown);\n\n};\n"],"file":"user_filters.min.js"}