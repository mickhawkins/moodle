{"version":3,"sources":["../../../src/local/user_filters/dropdowns.js"],"names":["setDropdownValue","e","uniqid","preventDefault","optionSelected","target","classList","contains","dropdownButton","parentNode","querySelector","previouslySet","getAttribute","selectedValue","innerText","setAttribute","document","getElementById","Selectors","filters","row","clear","remove","hasAttribute","insertEnhanced","filterType","selectString","filterset","uniqidSelector","filtersetUniqid","uniqidAttr","baseFilterDropdown","dropdown","base","filterRow","id","clearRow","rowFilterDropdown","cloneNode","enhanced","insertBefore","Autocomplete","enhance","enhancedSelector","init","querySelectorAll","forEach","addEventListener"],"mappings":"6MAwBA,OAEA,O,qXAGMA,CAAAA,CAAgB,CAAG,SAACC,CAAD,CAAIC,CAAJ,CAAe,CACpCD,CAAC,CAACE,cAAF,GAEA,GAAMC,CAAAA,CAAc,CAAGH,CAAC,CAACI,MAAzB,CAGA,GAAID,CAAc,CAACE,SAAf,CAAyBC,QAAzB,CAAkC,eAAlC,CAAJ,CAAwD,IAC9CC,CAAAA,CAAc,CAAGJ,CAAc,CAACK,UAAf,CAA0BA,UAA1B,CAAqCC,aAArC,CAAmD,QAAnD,CAD6B,CAE9CC,CAAa,CAAGH,CAAc,CAACI,YAAf,CAA4B,sBAA5B,CAF8B,CAG9CC,CAAa,CAAGT,CAAc,CAACQ,YAAf,CAA4B,YAA5B,CAH8B,CAMpDJ,CAAc,CAACM,SAAf,CAA2BV,CAAc,CAACU,SAA1C,CACAN,CAAc,CAACO,YAAf,CAA4B,sBAA5B,CAAoDF,CAApD,EAGA,GAAIL,CAAc,CAACI,YAAf,CAA4B,sBAA5B,IAAwDJ,CAAc,CAACI,YAAf,CAA4B,uBAA5B,CAA5D,CAAkH,CAC9GI,QAAQ,CAACC,cAAT,CAAwBC,UAAUC,OAAV,CAAkBC,GAAlB,CAAsBC,KAAtB,CAA4BnB,CAA5B,CAAxB,EAA6DI,SAA7D,CAAuEgB,MAAvE,CAA8E,UAA9E,CACH,CAGD,GAAIlB,CAAc,CAACmB,YAAf,CAA4B,kBAA5B,GAAmD,CAACZ,CAApD,EACwD,kBAApD,GAAAP,CAAc,CAACQ,YAAf,CAA4B,kBAA5B,CADR,CACgF,CAExEY,CAAc,CAACtB,CAAD,CAASW,CAAT,CACrB,CACJ,CACJ,C,CAGKW,CAAc,4CAAG,WAAMtB,CAAN,CAAcuB,CAAd,oHACQ,iBAAU,cAAV,CAA0B,MAA1B,CADR,QACbC,CADa,QAEbC,CAFa,CAEDX,QAAQ,CAACN,aAAT,CAAuBQ,UAAUS,SAAV,CAAoBC,cAA3C,CAFC,CAGbC,CAHa,CAGKF,CAAS,CAACf,YAAV,CAAuBM,UAAUS,SAAV,CAAoBG,UAA3C,CAHL,CAIbC,CAJa,CAIQf,QAAQ,CAACC,cAAT,CAAwBC,UAAUC,OAAV,CAAkBa,QAAlB,CAA2BC,IAA3B,WAAmCJ,CAAnC,aAAsDJ,CAAtD,EAAxB,CAJR,CAKbS,CALa,CAKDlB,QAAQ,CAACC,cAAT,CAAwBC,UAAUC,OAAV,CAAkBC,GAAlB,CAAsBe,EAAtB,CAAyBjC,CAAzB,CAAxB,CALC,CAMbkC,CANa,CAMFpB,QAAQ,CAACC,cAAT,CAAwBC,UAAUC,OAAV,CAAkBC,GAAlB,CAAsBC,KAAtB,CAA4BnB,CAA5B,CAAxB,CANE,CAObmC,CAPa,CAOON,CAAkB,CAACO,SAAnB,IAPP,CAQnBD,CAAiB,CAACF,EAAlB,CAAuBjB,UAAUC,OAAV,CAAkBa,QAAlB,CAA2BO,QAA3B,CAAoCrC,CAApC,CAAvB,CAEAgC,CAAS,CAACM,YAAV,CAAuBH,CAAvB,CAA0CD,CAA1C,EACAK,UAAaC,OAAb,CAAqBxB,UAAUC,OAAV,CAAkBa,QAAlB,CAA2BW,gBAA3B,CAA4CzC,CAA5C,CAArB,IAAiF,IAAjF,CACQwB,CADR,OACmC,IADnC,OACsD,OADtD,EAXmB,yCAAH,uD,QAgBA,QAAPkB,CAAAA,IAAO,CAAA1C,CAAM,CAAI,CAE1Bc,QAAQ,CAAC6B,gBAAT,CAA0B,mCAA1B,EAA+DC,OAA/D,CAAuE,SAACd,CAAD,CAAc,CACjFA,CAAQ,CAACe,gBAAT,CAA0B,OAA1B,CAAmC,SAAS9C,CAAT,CAAY,CAC3CD,CAAgB,CAACC,CAAD,CAAIC,CAAJ,CACnB,CAFD,CAGH,CAJD,CAKH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module containing the handlers that control user filter dropdown functionality.\n *\n * @module     core_user/local/user_filter/dropdowns\n * @package    core_user\n * @copyright  2020 Michael Hawkins <michaelh@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Autocomplete from 'core/form-autocomplete';\nimport {get_string as getString} from 'core/str';\nimport Selectors from './selectors';\n\n// Set values for single dropdowns.\nconst setDropdownValue = (e, uniqid) => {\n    e.preventDefault();\n\n    const optionSelected = e.target;\n\n    // Only handle specific items being selected.\n    if (optionSelected.classList.contains('dropdown-item')) {\n        const dropdownButton = optionSelected.parentNode.parentNode.querySelector('button');\n        const previouslySet = dropdownButton.getAttribute('data-option-selected');\n        const selectedValue = optionSelected.getAttribute('data-value');\n\n        // Display the selection and set the hidden value.\n        dropdownButton.innerText = optionSelected.innerText;\n        dropdownButton.setAttribute('data-option-selected', selectedValue);\n\n        // Enable the 'clear' button for the filter row, if the dropdown changes from default.\n        if (dropdownButton.getAttribute('data-option-selected') !== dropdownButton.getAttribute('data-default-selected')) {\n            document.getElementById(Selectors.filters.row.clear(uniqid)).classList.remove('disabled');\n        }\n\n        // Filter type enhanced dropdowns need to display the filter options.\n        if (optionSelected.hasAttribute(\"data-filter-type\") && !previouslySet &&\n                optionSelected.getAttribute(\"data-filter-type\") === 'enhanceddropdown') {\n\n                insertEnhanced(uniqid, selectedValue);\n        }\n    }\n};\n\n// Insert enhanced dropdown for selected filter type.\nconst insertEnhanced = async(uniqid, filterType) => {\n    const selectString = await getString('typeorselect', 'core');\n    const filterset = document.querySelector(Selectors.filterset.uniqidSelector);\n    const filtersetUniqid = filterset.getAttribute(Selectors.filterset.uniqidAttr);\n    const baseFilterDropdown = document.getElementById(Selectors.filters.dropdown.base(`${filtersetUniqid}-${filterType}`));\n    const filterRow = document.getElementById(Selectors.filters.row.id(uniqid));\n    const clearRow = document.getElementById(Selectors.filters.row.clear(uniqid));\n    const rowFilterDropdown = baseFilterDropdown.cloneNode(true);\n    rowFilterDropdown.id = Selectors.filters.dropdown.enhanced(uniqid);\n\n    filterRow.insertBefore(rowFilterDropdown, clearRow);\n    Autocomplete.enhance(Selectors.filters.dropdown.enhancedSelector(uniqid), false, null,\n            selectString, false, true, null, false, true, 'right');\n};\n\n// Initialise the dropdowns in a participants filter row.\nexport const init = uniqid => {\n    // Set listener on each filter dropdown menu.\n    document.querySelectorAll('.dropdown-menu.user-filter-select').forEach((dropdown) => {\n        dropdown.addEventListener('click', function(e) {\n            setDropdownValue(e, uniqid);\n        });\n    });\n};\n"],"file":"dropdowns.min.js"}