{"version":3,"sources":["../../../src/local/user_filters/dropdowns.js"],"names":["setDropdownValue","e","uniqid","preventDefault","optionSelected","target","classList","contains","dropdownButton","parentNode","querySelector","previouslySet","getAttribute","innerText","setAttribute","document","getElementById","Selectors","filters","row","clear","remove","hasAttribute","selectString","Autocomplete","enhance","dropdown","select","init","querySelectorAll","forEach","addEventListener"],"mappings":"6MAwBA,OAEA,O,qXAGMA,CAAAA,CAAgB,4CAAG,WAAMC,CAAN,CAASC,CAAT,+FACrBD,CAAC,CAACE,cAAF,GAEMC,CAHe,CAGEH,CAAC,CAACI,MAHJ,KAMjBD,CAAc,CAACE,SAAf,CAAyBC,QAAzB,CAAkC,eAAlC,CANiB,kBAOXC,CAPW,CAOMJ,CAAc,CAACK,UAAf,CAA0BA,UAA1B,CAAqCC,aAArC,CAAmD,QAAnD,CAPN,CAQXC,CARW,CAQKH,CAAc,CAACI,YAAf,CAA4B,sBAA5B,CARL,CAWjBJ,CAAc,CAACK,SAAf,CAA2BT,CAAc,CAACS,SAA1C,CACAL,CAAc,CAACM,YAAf,CAA4B,sBAA5B,CAAoDV,CAAc,CAACQ,YAAf,CAA4B,YAA5B,CAApD,EAGA,GAAIJ,CAAc,CAACI,YAAf,CAA4B,sBAA5B,IAAwDJ,CAAc,CAACI,YAAf,CAA4B,uBAA5B,CAA5D,CAAkH,CAC9GG,QAAQ,CAACC,cAAT,CAAwBC,UAAUC,OAAV,CAAkBC,GAAlB,CAAsBC,KAAtB,CAA4BlB,CAA5B,CAAxB,EAA6DI,SAA7D,CAAuEe,MAAvE,CAA8E,UAA9E,CACH,CAjBgB,KAoBbjB,CAAc,CAACkB,YAAf,CAA4B,kBAA5B,GAAmD,CAACX,CAApD,EACwD,kBAApD,GAAAP,CAAc,CAACQ,YAAf,CAA4B,kBAA5B,CArBS,mCAuBc,iBAAU,cAAV,CAA0B,MAA1B,CAvBd,SAuBPW,CAvBO,QAyBbC,UAAaC,OAAb,CAAqBR,UAAUC,OAAV,CAAkBQ,QAAlB,CAA2BC,MAA3B,CAAkCzB,CAAlC,CAArB,IAAuE,IAAvE,CAA6EqB,CAA7E,OACqB,IADrB,OACwC,OADxC,EAzBa,yCAAH,uD,QAgCF,QAAPK,CAAAA,IAAO,CAAA1B,CAAM,CAAI,CAE1Ba,QAAQ,CAACc,gBAAT,CAA0B,mCAA1B,EAA+DC,OAA/D,CAAuE,SAACJ,CAAD,CAAc,CACjFA,CAAQ,CAACK,gBAAT,CAA0B,OAA1B,CAAmC,SAAS9B,CAAT,CAAY,CAC3CD,CAAgB,CAACC,CAAD,CAAIC,CAAJ,CACnB,CAFD,CAGH,CAJD,CAKH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module containing the handlers that control user filter dropdown functionality.\n *\n * @module     core_user/local/user_filter/dropdowns\n * @package    core_user\n * @copyright  2020 Michael Hawkins <michaelh@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Autocomplete from 'core/form-autocomplete';\nimport {get_string as getString} from 'core/str';\nimport Selectors from './selectors';\n\n// Set values for single dropdowns.\nconst setDropdownValue = async(e, uniqid) => {\n    e.preventDefault();\n\n    const optionSelected = e.target;\n\n    // Only handle specific items being selected.\n    if (optionSelected.classList.contains('dropdown-item')) {\n        const dropdownButton = optionSelected.parentNode.parentNode.querySelector('button');\n        const previouslySet = dropdownButton.getAttribute('data-option-selected');\n\n        // Display the selection and set the hidden value.\n        dropdownButton.innerText = optionSelected.innerText;\n        dropdownButton.setAttribute('data-option-selected', optionSelected.getAttribute('data-value'));\n\n        // Enable the 'clear' button for the filter row, if the dropdown changes from default.\n        if (dropdownButton.getAttribute('data-option-selected') !== dropdownButton.getAttribute('data-default-selected')) {\n            document.getElementById(Selectors.filters.row.clear(uniqid)).classList.remove('disabled');\n        }\n\n        // Filter type enhanced dropdowns need to display the filter options.\n        if (optionSelected.hasAttribute(\"data-filter-type\") && !previouslySet &&\n                optionSelected.getAttribute(\"data-filter-type\") === 'enhanceddropdown') {\n\n            const selectString = await getString('typeorselect', 'core');\n\n            Autocomplete.enhance(Selectors.filters.dropdown.select(uniqid), false, null, selectString,\n                    false, true, null, false, true, 'right');\n        }\n    }\n};\n\n// Initialise the dropdowns in a participants filter row.\nexport const init = uniqid => {\n    // Set listener on each filter dropdown menu.\n    document.querySelectorAll('.dropdown-menu.user-filter-select').forEach((dropdown) => {\n        dropdown.addEventListener('click', function(e) {\n            setDropdownValue(e, uniqid);\n        });\n    });\n};\n"],"file":"dropdowns.min.js"}